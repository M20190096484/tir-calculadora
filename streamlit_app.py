{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# \ud83e\uddee Calculadora Interativa de TIR (Taxa Interna de Retorno)\n", "Digite os fluxos de caixa e calcule a TIR usando o m\u00e9todo da bisse\u00e7\u00e3o com interface interativa.\n"]}, {"cell_type": "code", "metadata": {}, "execution_count": null, "outputs": [], "source": ["import ipywidgets as widgets\n", "from IPython.display import display, clear_output, Markdown\n", "\n", "def vpl(fluxos, taxa):\n", "    return sum([fc / (1 + taxa) ** i for i, fc in enumerate(fluxos)])\n", "\n", "def tir_bissecao(fluxos, taxa_min=0.00001, taxa_max=1.0, tolerancia=1e-6, max_iter=1000):\n", "    f_min = vpl(fluxos, taxa_min)\n", "    f_max = vpl(fluxos, taxa_max)\n", "    if f_min * f_max > 0:\n", "        return None\n", "    for _ in range(max_iter):\n", "        taxa_meio = (taxa_min + taxa_max) / 2\n", "        f_meio = vpl(fluxos, taxa_meio)\n", "        if abs(f_meio) < tolerancia:\n", "            return taxa_meio\n", "        if f_min * f_meio < 0:\n", "            taxa_max = taxa_meio\n", "            f_max = f_meio\n", "        else:\n", "            taxa_min = taxa_meio\n", "            f_min = f_meio\n", "    return (taxa_min + taxa_max) / 2\n", "\n", "titulo = Markdown(\"## \ud83e\uddee Calculadora Interativa de TIR (Taxa Interna de Retorno)\")\n", "instrucoes = Markdown(\"\"\"\n", "**Instru\u00e7\u00f5es:**\n", "- Digite os valores dos fluxos separados por v\u00edrgulas.\n", "- O primeiro valor deve ser o investimento inicial (negativo).\n", "- Os demais s\u00e3o os retornos ao longo do tempo (positivos).\n", "- Escolha se deseja calcular com base mensal ou anual.\n", "\"\"\")\n", "\n", "periodicidade = widgets.Dropdown(\n", "    options=[\"Mensal\", \"Anual\"],\n", "    description=\"Periodicidade:\",\n", "    style={\"description_width\": \"initial\"}\n", ")\n", "\n", "fluxos_input = widgets.Text(\n", "    value=\"-1000, 200, 250, 300, 400\",\n", "    description=\"Fluxos de Caixa:\",\n", "    placeholder=\"Ex: -1000, 200, 250, 300\",\n", "    layout=widgets.Layout(width='80%'),\n", "    style={\"description_width\": \"initial\"}\n", ")\n", "\n", "botao = widgets.Button(\n", "    description=\"Calcular TIR\",\n", "    button_style=\"success\"\n", ")\n", "\n", "saida = widgets.Output()\n", "\n", "def ao_clicar(b):\n", "    with saida:\n", "        clear_output()\n", "        try:\n", "            fluxos = [float(x.strip()) for x in fluxos_input.value.split(\",\")]\n", "            tir = tir_bissecao(fluxos)\n", "            if tir is None:\n", "                print(\"\u26a0\ufe0f Erro: O VPL n\u00e3o muda de sinal. Verifique os fluxos.\")\n", "                return\n", "            if periodicidade.value == \"Mensal\":\n", "                tir_mensal = tir * 100\n", "                tir_anual = ((1 + tir) ** 12 - 1) * 100\n", "                print(f\"\u2705 TIR Mensal: {tir_mensal:.2f}%\")\n", "                print(f\"\ud83d\udcc8 TIR Anual equivalente: {tir_anual:.2f}%\")\n", "            else:\n", "                tir_anual = tir * 100\n", "                tir_mensal = ((1 + tir) ** (1/12) - 1) * 100\n", "                print(f\"\u2705 TIR Anual: {tir_anual:.2f}%\")\n", "                print(f\"\ud83d\udcc9 TIR Mensal equivalente: {tir_mensal:.2f}%\")\n", "        except Exception as e:\n", "            print(f\"\u274c Erro: {e}\")\n", "\n", "botao.on_click(ao_clicar)\n", "\n", "display(titulo, instrucoes, fluxos_input, periodicidade, botao, saida)\n"]}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}, "language_info": {"name": "python", "version": "3.8"}}, "nbformat": 4, "nbformat_minor": 5}
